name: Generate and Store SSH Key

on:
  workflow_dispatch:

jobs:
  generate-and-store-key:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate SSH Key
        run: |
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          echo "SSH public key:"
          cat ~/.ssh/id_rsa.pub

      - name: Fetch Public Key
        id: get_public_key
        run: |
          PUBLIC_KEY_RESPONSE=$( curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)
           # Debug: Print the full response
          echo "Response: $PUBLIC_KEY_RESPONSE"
          PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r .key)
          KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r .key_id)
          echo "PUBLIC_KEY=$PUBLIC_KEY" >> $GITHUB_ENV
          echo "KEY_ID=$KEY_ID" >> $GITHUB_ENV
        env:
          TOKEN: ${{ secrets.MY_PAT }}
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Specify the Node.js version you need

      - name: Install libsodium
        run: |
          npm install libsodium-wrappers

      - name: Read Private Key and Encrypt
        env:
          PUBLIC_KEY: ${{ env.PUBLIC_KEY }}
        id: encrypt  # Assign an ID to this step
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const sodium = require('libsodium-wrappers');
            
            // Read the private key from the file
            const secret = fs.readFileSync('/home/runner/.ssh/id_rsa', 'utf8').trim();
            const key = '$PUBLIC_KEY'; // Replace with your actual key name
            
            // Check if libsodium is ready and then proceed
            sodium.ready.then(() => {
              // Convert the secret and key to a Uint8Array.
              let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
              let binsec = sodium.from_string(secret)
            
              // Encrypt the secret using libsodium
              let encBytes = sodium.crypto_box_seal(binsec, binkey)
            
              // Convert the encrypted Uint8Array to Base64
              let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
            
              // Print the output
              console.log(output)
            });

      - name: Save Private Key to GitHub Secret
        run: |
          curl -X PUT -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/SSH_PRIVATE_KEY \
            -d "{\"encrypted_value\":\"${{ env.ENCRYPTED_PRIVATE_KEY }}\", \"key_id\":\"${{ env.KEY_ID }}\"}"
